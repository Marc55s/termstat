# This workflow builds and releases your Rust project when you push a git tag
# that starts with 'v' (e.g., v1.0.0, v0.2.1).
#
# 1. Place this file in your repository at .github/workflows/release.yml
# 2. !! IMPORTANT !!
#    Change the `BINARY_NAME` env variable below to match your binary's name
#    (which is usually the 'name' field in your Cargo.toml).
#
name: Rust Release

on:
  push:
    tags:
      - 'v*' # Trigger workflow on tags starting with 'v'

# Set a default environment variable for your binary name.
# !! CHANGE THIS TO YOUR BINARY'S NAME !!
env:
  BINARY_NAME: your-binary-name-here

jobs:
  # Job to build the binaries for different platforms
  build-and-release:
    name: Build & Release
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          # Linux (GNU)
          - platform: linux-x86_64
            os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          # macOS (x86_64)
          - platform: macos-x86_64
            os: macos-latest
            target: x86_64-apple-darwin
          # macOS (Apple Silicon)
          - platform: macos-aarch64
            os: macos-latest
            target: aarch64-apple-darwin
          # Windows (MSVC)
          - platform: windows-x86_64
            os: windows-latest
            target: x86_64-pc-windows-msvc

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: stable
          targets: ${{ matrix.target }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Build binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare asset names and paths
        # This step creates environment variables for the asset name and binary path
        # based on the runner's operating system.
        shell: bash
        run: |
          if [ "${{ runner.os }}" == "Windows" ]; then
            # Windows uses .exe and .zip
            echo "ASSET_NAME=${{ env.BINARY_NAME }}-${{ matrix.platform }}.zip" >> $GITHUB_ENV
            echo "BINARY_PATH=target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}.exe" >> $GITHUB_ENV
          else
            # Linux and macOS use .tar.gz
            echo "ASSET_NAME=${{ env.BINARY_NAME }}-${{ matrix.platform }}.tar.gz" >> $GITHUB_ENV
            echo "BINARY_PATH=target/${{ matrix.target }}/release/${{ env.BINARY_NAME }}" >> $GITHUB_ENV
          fi

      - name: Package asset (Windows)
        if: runner.os == 'Windows'
        # Use PowerShell to create a .zip archive
        shell: powershell
        run: Compress-Archive -Path ${{ env.BINARY_PATH }} -DestinationPath ${{ env.ASSET_NAME }}

      - name: Package asset (Linux/macOS)
        if: runner.os != 'Windows'
        # Use tar to create a .tar.gz archive
        # -C changes directory to the binary's parent folder to avoid including the full path
        run: tar -czvf ${{ env.ASSET_NAME }} -C $(dirname ${{ env.BINARY_PATH }}) $(basename ${{ env.BINARY_PATH }})
        
      - name: Upload asset for release
        # This uploads the packaged asset (zip/tar.gz) so the next job can use it
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.platform }}-asset # Unique name for each artifact
          path: ${{ env.ASSET_NAME }}
          retention-days: 1 # We only need it for the next job

  # Job to create the GitHub Release and upload all assets
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build-and-release # Wait for all builds to finish
    permissions:
      contents: write # Required to create a release
    
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/ # Download all artifacts into an 'artifacts' directory
          
      - name: Create GitHub Release
        # This action uses the GITHUB_TOKEN to create a release.
        # It automatically finds the tag that triggered the workflow.
        uses: softprops/action-gh-release@v2
        with:
          # Use a glob pattern to find all asset files downloaded in the previous step
          files: artifacts/*/*
          
          # Automatically generate release notes from commits since the last tag
          generate_release_notes: true
          
          # Set the release name to be the same as the tag
          name: ${{ github.ref_name }}
